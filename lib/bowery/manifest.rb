# A JS or CSS manifest for Sprockets.

module Bowery
  class Manifest
    include ActiveModel::Model

    attr_accessor :name, :path, :type, :components

    validates :name, presence: true
    validates :path, presence: true
    validates :type, presence: true, inclusion: { in: ['javascripts', 'stylesheets'] }
    validates :components, presence: true

    # The name of this manifest file. Defaults to 'application', but can
    # be configured to be something different in the `Bowery::Config`.
    def name
      @name ||= 'application'
    end

    # A partial path from the `Rails.root` that dictates where all
    # components are to be installed. This is also the prefix by which
    # we compute the absolute path to the manifest file that this object
    # is responsible for creating.
    def path
      @path ||= 'vendor/components'
    end

    # An exposed absolute path to this manifest file,
    # calculated from the base `path` and appended with the kind of
    # manifest this object represents (`type`) as well as the configured
    # name and proper extension based on type.
    def absolute_path
      @abs_path ||= "#{path}/#{type}/#{name}.#{extension}"
    end

    # A computed file extension based on what kind of manifest file this
    # is. The `type` is validated to only be 'javascripts' or
    # 'stylesheets', so if another String is encountered in its place,
    # it will throw an exception.
    def extension
      @extension ||= case type
      when 'javascripts'
        'js'
      when 'stylesheets'
        'css'
      else
        raise TypeError, "Extension can't be calculated for '#{type}'"
      end
    end

    # Write the manifest contents generated by this file to disk.
    def save
      return false unless valid?
      File.open path, 'rw+' do |manifest_file|
        manifest_file.puts contents
      end
    end

    def contents
      @file_contents ||= if type == 'javascripts'
        requires
      else
        %{
        /*
         #{requires}
         */
        }
      end
    end

    protected
    def requires
      @requires = relevant_components.reduce("") do |reqs,asset|
        reqs += "#{require_prefix} #{asset.name}"
      end
    end

    private
    def require_prefix
      case type
      when 'stylesheets'
        "*="
      when 'javascripts'
        "//="
      else
        ""
      end
    end

    def relevant_components
      components.where extension => true
    end

    private
    def set_defaults
      DEFAULTS.keys.each do |attr|
        self.send "#{attr}=", DEFAULTS[attr] if self.send(attr).nil?
      end
    end
  end
end
